#!/usr/bin/env ruby
Dir.chdir(__dir__) do
  require "bundler/setup"
  require "optparse"
  require_relative "../lib/oceanography/concurrent_file_handler"
end

begin
  options = {}
  banner = "Usage: ./ncdocs.sh [options] FILE|PATH"
  optparse = OptionParser.new do |opts|
    opts.banner = banner

    opts.on('-m', '--mappers LIST', "List of mappers to use, Default MissingValuesMapper,KeyValueCorrectionsMapper,
                                     CommentsMapper,CollectionMapper,ClimateForecastMapper") { |v|
        options[:mappers] = v.split(',')
      }
    opts.on('-o', '--outpath PATH', 'Path to write json docs to') { |v| options[:out_path] = v }
    opts.on('-p', '--post URL', 'URL to post json docs to') { |v| options[:api_url] = v }
    opts.on('-s', '--schema PATH', 'Path to json schema to validate docs against') { |v| options[:schema] = v }
    opts.on('-t', '--threads #', 'Number of threads. Default 4') { |v| options[:nr_of_threads] = v.to_i }
    opts.on('-v', '--verbose', 'Log level debug. Default info') { |v| options[:log_level] = Logger::DEBUG }
    opts.on('-h', '--help', 'Display this screen') do
      puts opts
      exit
    end

  end.parse!

  def args_ok?()
    ARGV.size > 0
  end

  if !args_ok?
    puts banner
    exit
  end

  options["file_path"] = ARGV

  file_handler = Oceanography::ConcurrentFileHandler.new(options)
  file_handler.parse_files()

rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  puts $!.to_s
  puts optparse
  exit
end
